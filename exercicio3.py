'''Fa√ßa um programa em Python orientado a objetos que receba uma frase dada pelo usu√°rio e a criptografe. 
A criptografia consistir√° na troca das vogais da frase por um n√∫mero correspondente: A ‚Äì 4, E ‚Äì 3, I ‚Äì 1, O ‚Äì 0, U ‚Äì 8.'''

'''class Criptografia:
    def _init_(self, frase):
        self.frase = frase

    def criptografar(self):
        tabela_criptografia = str.maketrans('AEIOUaeiou', '4310843108')
        frase_criptografada = self.frase.translate(tabela_criptografia)
        return frase_criptografada
    
# Solicita ao usu√°rio que insira uma frase
frase_usuario = input("Digite uma frase para criptografar: ")

# Cria uma inst√¢ncia da classe Criptografia com a frase do usu√°rio
criptografador = Criptografia(frase_usuario)    
# Chama o m√©todo para criptografar a frase e exibe o resultado
frase_criptografada = criptografador.criptografar()
print("Frase criptografada:", frase_criptografada)'''

# C√≥digo adicional para melhorar a funcionalidade e usabilidade do programa
'''# Classe para criptografar frases usando substitui√ß√£o de vogais por n√∫meros
class CriptografadorAvancado:
    """
    Classe que implementa criptografia atrav√©s da substitui√ß√£o de vogais por n√∫meros.
    Utiliza a tabela: A=4, E=3, I=1, O=0, U=8
    """
    
    # M√©todo construtor que inicializa o objeto com a frase
    def _init_(self, frase):
        # Armazena a frase original fornecida pelo usu√°rio
        self.frase_original = frase
        
        # Cria tabela de tradu√ß√£o para criptografia (mai√∫sculas e min√∫sculas)
        self.tabela_cripto = str.maketrans(
            'AEIOUaeiou',  # Caracteres a serem substitu√≠dos
            '4310843108'   # Caracteres substitutos (respectivamente)
        )
        
        # Cria tabela de tradu√ß√£o para descriptografia
        self.tabela_descripto = str.maketrans(
            '43108',       # N√∫meros a serem convertidos de volta
            'AEIOU'        # Vogais correspondentes (sempre mai√∫sculas)
        )

    # M√©todo para criptografar a frase usando a tabela de tradu√ß√£o
    def criptografar(self):
        """
        Criptografa a frase substituindo vogais por n√∫meros.
        Retorna: Frase criptografada
        """
        # Usa o m√©todo translate() com a tabela de criptografia
        return self.frase_original.translate(self.tabela_cripto)

    # M√©todo para descriptografar uma frase criptografada
    def descriptografar(self, frase_criptografada=None):
        """
        Descriptografa uma frase convertendo n√∫meros de volta para vogais.
        Se nenhuma frase for fornecida, usa a frase atual do objeto.
        Retorna: Frase descriptografada
        """
        # Se n√£o for fornecida frase, usa a frase criptografada atual
        if frase_criptografada is None:
            frase_criptografada = self.criptografar()
        
        # Aplica a tradu√ß√£o reversa para obter a frase original
        return frase_criptografada.translate(self.tabela_descripto)

    # M√©todo para exibir an√°lise completa da criptografia
    def exibir_analise_completa(self):
        """
        Exibe uma an√°lise completa comparando frase original e criptografada
        """
        # Criptografa a frase original
        frase_cripto = self.criptografar()
        
        # Exibe cabe√ßalho formatado
        print("\n" + "‚ïê" * 60)
        print("üîê AN√ÅLISE DE CRIPTOGRAFIA")
        print("‚ïê" * 60)
        
        # Exibe a frase original
        print(f"üìù Frase original: {self.frase_original}")
        
        # Exibe a frase criptografada
        print(f"üîí Frase criptografada: {frase_cripto}")
        
        # Exibe a frase descriptografada (para demonstra√ß√£o)
        print(f"üîì Frase descriptografada: {self.descriptografar(frase_cripto)}")
        
        # Exibe estat√≠sticas
        print(f"üìä Total de caracteres: {len(self.frase_original)}")
        
        # Conta quantas vogais foram substitu√≠das
        vogais = 'AEIOUaeiou'
        vogais_substituidas = sum(1 for char in self.frase_original if char in vogais)
        print(f"üî¢ Vogais substitu√≠das: {vogais_substituidas}")
        
        # Exibe a tabela de substitui√ß√£o
        print("\nüìã Tabela de substitui√ß√£o:")
        print("   A ‚Üí 4 | E ‚Üí 3 | I ‚Üí 1 | O ‚Üí 0 | U ‚Üí 8")
        print("‚ïê" * 60)
        
        # Retorna a frase criptografada para uso posterior
        return frase_cripto

# Fun√ß√£o principal do programa
def main():
    """
    Fun√ß√£o principal que gerencia o fluxo do programa
    """
    # Solicita ao usu√°rio que digite uma frase
    frase_usuario = input("Digite uma frase para criptografar: ")
    
    # Cria uma inst√¢ncia do criptografador com a frase do usu√°rio
    criptografador = CriptografadorAvancado(frase_usuario)
    
    # Exibe a an√°lise completa da criptografia
    criptografador.exibir_analise_completa()

# Verifica se o script est√° sendo executado diretamente
if _name_ == "_main_":
    """
    Garante que o c√≥digo s√≥ execute quando o arquivo for rodado diretamente,
    e n√£o quando importado como m√≥dulo
    """
    # Chama a fun√ß√£o principal
    main()'''